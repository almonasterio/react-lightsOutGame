{"ast":null,"code":"import _slicedToArray from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.createBoard = _this.createBoard.bind(_assertThisInitialized(_assertThisInitialized(_this))); // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var i = 0; i < this.props.ncols; i++) {\n        var row = [];\n\n        for (var j = 0; j < this.props.nrows; j++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      } // TODO: create array-of-arrays of true/false values\n\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tblBoard = [];\n\n      for (var x = 0; x < this.props.ncols; x++) {\n        var row = [];\n\n        for (var y = 0; y < this.props.nrows; y++) {\n          row.push(board[x]);\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 1\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 3\n        }\n      }, tblBoard))); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  ncols: 5,\n  nrows: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/alvaro/Desktop/REACT - UDEMY/lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","bind","i","ncols","row","j","nrows","push","Math","random","chanceLightStartsOn","coord","split","map","Number","y","x","flipCell","tblBoard","defaultProps"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;AAOJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACRC,MAAAA,MAAM,EAAE,KADA;AAERC,MAAAA,KAAK,EAAE,MAAKC,WAAL;AAFC,KAAb;AAIA,UAAKA,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,uDAAnB,CANiB,CAQjB;;AARiB;AASlB;AAED;;;;;kCAEc;AACZ,UAAIF,KAAK,GAAG,EAAZ;;AACE,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,KAAL,CAAWO,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,YAAIE,GAAG,GAAE,EAAT;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKT,KAAL,CAAWU,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCD,UAAAA,GAAG,CAACG,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAc,KAAKb,KAAL,CAAWc,mBAAlC;AACD;;AACDX,QAAAA,KAAK,CAACQ,IAAN,CAAWH,GAAX;AACD,OARS,CAUZ;;;AACA,aAAOL,KAAP;AACD;AAED;;;;oCAEgBY,K,EAAO;AAAA,wBACA,KAAKf,KADL;AAAA,UAChBO,KADgB,eAChBA,KADgB;AAAA,UACTG,KADS,eACTA,KADS;AAErB,UAAIP,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAFqB,6BAGRY,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa;;AAMrB,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGb,KAAd,IAAuBY,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGT,KAAzC,EAAgD;AAC9CP,UAAAA,KAAK,CAACgB,CAAD,CAAL,CAASC,CAAT,IAAc,CAACjB,KAAK,CAACgB,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAZoB,CAcrB;AAEA;AACA;AAEA;;AACD;AAGD;;;;6BAES;AACR,UAAIE,QAAQ,GAAG,EAAf;;AACA,WAAI,IAAIF,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,KAAKpB,KAAL,CAAWO,KAA1B,EAAiCa,CAAC,EAAlC,EAAqC;AACnC,YAAIZ,GAAG,GAAC,EAAR;;AACA,aAAI,IAAIW,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,KAAKnB,KAAL,CAAWU,KAA1B,EAAgCS,CAAC,EAAjC,EAAqC;AACnCX,UAAAA,GAAG,CAACG,IAAJ,CAASR,KAAK,CAACiB,CAAD,CAAd;AACD;AACF;;AAEJ,0BAAQ,uDACR;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCE,QADD,CADF,CADQ,CAAR,CATW,CAmBP;AAEA;AAEA;AAEA;AACD;;;;EAvFiBzB,S;;AAAdE,K,CACGwB,Y,GAAa;AAClBhB,EAAAA,KAAK,EAAC,CADY;AAElBG,EAAAA,KAAK,EAAC,CAFY;AAGlBI,EAAAA,mBAAmB,EAAE;AAHH,C;AA0FtB,eAAef,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps={\n    ncols:5,\n    nrows:5,\n    chanceLightStartsOn: 0.25\n \n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n         hasWon: false,\n         board: this.createBoard()\n    };\n    this.createBoard = this.createBoard.bind(this)\n\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n      for (let i = 0; i < this.props.ncols; i++) {\n        let row =[]\n        for (let j = 0; j < this.props.nrows; j++) {\n          row.push(Math.random()<this.props.chanceLightStartsOn)\n        }\n        board.push(row)\n      }\n    \n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n   let tblBoard = [];\n   for(let x=0; x<this.props.ncols; x++){\n     let row=[]\n     for(let y=0; y<this.props.nrows;y++) {\n       row.push(board[x])\n     }\n   }\n\nreturn (<>\n<table className=\"Board\">\n  <tbody>\n  {tblBoard}\n  </tbody>\n</table>\n\n\n\n</>);\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}