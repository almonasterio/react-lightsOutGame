{"ast":null,"code":"import _slicedToArray from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/alvaro/Desktop/REACT - UDEMY/lights-out/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.createBoard = _this.createBoard.bind(_assertThisInitialized(_assertThisInitialized(_this))); // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = new Array(this.props.ncols).fill(new Array(this.props.nrows).fill().map()); //.fill((Math.random()>0.7)? \".\" : \"-\"))\n      //     board.forEach(el=> el.forEach(e=> {\n      //  console.log(\"entra\")\n      //       }))\n\n      for (var i = 0; i < this.props.ncols.length; i++) {\n        for (var j = 0; j < this.props.nrows.length; j++) {\n          console.log(\"entra\");\n          board[i][j] = \"45\";\n        }\n      } // TODO: create array-of-arrays of true/false values\n\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.board);\n      console.log(Math.random() * this.props.chanceLightStartsOn);\n      console.log(Math.random() * this.props.chanceLightStartsOn);\n      console.log(Math.random() * this.props.chanceLightStartsOn);\n      console.log(Math.random() * this.props.chanceLightStartsOn);\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 1\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 3\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        isLit: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }\n      }))))); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  ncols: 3,\n  nrows: 3,\n  chanceLightStartsOn: 0.7\n};\nexport default Board;","map":{"version":3,"sources":["/Users/alvaro/Desktop/REACT - UDEMY/lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","bind","Array","ncols","fill","nrows","map","i","length","j","console","log","coord","split","Number","y","x","flipCell","Math","random","chanceLightStartsOn","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps={\n    ncols:3,\n    nrows:3,\n    chanceLightStartsOn: 0.7\n \n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n         hasWon: false,\n         board: this.createBoard()\n    };\n    this.createBoard = this.createBoard.bind(this)\n\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = new Array(this.props.ncols).fill(new Array(this.props.nrows).fill().map())\n    //.fill((Math.random()>0.7)? \".\" : \"-\"))\n \n//     board.forEach(el=> el.forEach(e=> {\n//  console.log(\"entra\")\n//       }))\n    for (var i = 0; i < this.props.ncols.length; i++) {\n      for (var j = 0; j < this.props.nrows.length; j++) {\n          console.log(\"entra\")\n        board[i][j]=\"45\";\n      \n      }\n      \n    }\n    \n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    console.log(this.state.board)\n       console.log(Math.random() * this.props.chanceLightStartsOn)\n         console.log(Math.random() * this.props.chanceLightStartsOn)\n           console.log(Math.random() * this.props.chanceLightStartsOn)\n             console.log(Math.random() * this.props.chanceLightStartsOn)\nreturn (<>\n<table className=\"Board\">\n  <tbody>\n    <td>\n      <Cell/>\n      <Cell isLit={true}/>\n    </td>\n  </tbody>\n</table>\n\n\n\n</>);\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}